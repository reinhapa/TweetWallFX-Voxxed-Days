/*
 * The MIT License
 *
 * Copyright 2018 TweetWallFX
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

plugins {
    id 'base'
    id 'build-dashboard'
    id 'com.diffplug.spotless' version '6.11.0'
    id 'com.github.ben-manes.versions' version '0.42.0'
    id 'com.github.spotbugs' version '5.0.12'
    id 'com.google.osdetector' version '1.7.1'
    id 'nebula.info-dependencies' version '11.4.1'
    id 'nebula.maven-nebula-publish' version '18.4.0'
    id 'net.ltgt.errorprone' version '2.0.2'
    id 'org.sonarqube' version '3.4.0.2513'
}

ext {
    javaFxPlatform = osdetector.os == 'osx' ? 'mac' : osdetector.os == 'windows' ? 'win' : osdetector.os
    javaFxPlatform = osdetector.arch == 'aarch_64' ? javaFxPlatform + '-aarch64' : javaFxPlatform
    javaFxPlatform = osdetector.arch == 'arm_32' ? javaFxPlatform + '-arm32-monocle' : javaFxPlatform
}

allprojects {
    group = 'org.tweetwallfx'
    version = currentVersion
    description = 'JavaFX based Tweetwall'

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    // configuring Spotless
    apply plugin: "com.diffplug.spotless"

    afterEvaluate {
        spotless {
            format 'textBasedFiles', {
                target(
                        '*.gradle',
                        '**/*.asciidoc',
                        '**/*.adoc',
                        '**/*.asc',
                        '**/*.css',
                        '**/*.json',
                        '**/*.md',
                        '**/*.properties',
                        '.gitignore',
                )

                trimTrailingWhitespace()
                indentWithSpaces(4)
                endWithNewline()
            }
            def closure = {
                trimTrailingWhitespace()
                indentWithSpaces(4)
                endWithNewline()
    //            importOrder(
    //                '\\#',    // static imports
    //                'java',   // classes from java root package
    //                'javax',  // classes from javax root package
    //                '',       // any other import
    //            )
                replaceRegex 'noStarImports', /\nimport (static )?[a-zA-Z0-9.]*[.][\*];\n/, '\n'
                replaceRegex 'noMultipleEmptyLines', '\n{3,}', '\n\n'
                replaceRegex 'Remove @author javadoc taglets.', '\n\\s*\\*\\s*@author.*', ''
                replaceRegex 'Remove trailing empty comment lines.', '\n\\s*\\*(\n\\s*\\*/\n)', '$1'
                replaceRegex 'Remove empty javadoc', '\n\\s*/\\*\\*\n\\s*\\*/\n', '\n\n'
                replaceRegex 'Remove empty lines before end of block', '\\n[\\n]+(\\s*})(?=\\n)', '\n$1'
                licenseHeaderFile rootProject.file('LICENSE.spotlessTemplate')
            }

            if (plugins.hasPlugin(GroovyPlugin)) {
                groovy(closure)
            } else if (plugins.hasPlugin(JavaPlugin)) {
                java(closure)
            }
        }

        tasks.named('check') {
            dependsOn spotlessCheck
        }
    }

    // now configuring for projects that coontain code not just structuring the project
    if (childProjects.isEmpty()) {
        // configuring standard java project
        apply plugin: 'java'
        apply plugin: 'idea'
        apply plugin: 'jacoco'
        apply plugin: 'eclipse'
        apply plugin: 'nebula.info'
        apply plugin: 'maven-publish'

        configurations {
            javafx
            jaxb
            testImplementation {
                exclude group: 'junit'
            }
        }

        dependencies {
            javafx 'org.openjfx:javafx-base:18.0.1:' + javaFxPlatform
            javafx 'org.openjfx:javafx-graphics:18.0.1:' + javaFxPlatform
            javafx 'org.openjfx:javafx-fxml:18.0.1:' + javaFxPlatform
            javafx 'org.openjfx:javafx-controls:18.0.1:' + javaFxPlatform

            jaxb 'jakarta.activation:jakarta.activation-api:2.1.0'
            jaxb 'org.eclipse.angus:angus-activation:1.0.0'
            jaxb 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.0'
            jaxb 'org.glassfish.jaxb:jaxb-runtime:4.0.1'

            testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.1'
            testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.1'
            testImplementation 'org.assertj:assertj-core:3.23.1'
            testImplementation 'org.mockito:mockito-junit-jupiter:4.8.0'

            testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
            testRuntimeOnly 'org.junit.platform:junit-platform-runner:1.9.1'
            testRuntimeOnly 'org.mockito:mockito-inline:4.8.0'
        }

        ext {
            getJvmModulePath = { -> (configurations.javafx + configurations.jaxb).asPath}
            getJvmAdditionalModules = { ->
                [
                    'jakarta.activation',
                    'jakarta.xml.bind',
                    'javafx.controls',
                    'javafx.graphics',
                    'javafx.fxml'
                ].toUnique().toSorted().join(',')
            }
        }

        tasks.named('jar') {
            manifest.attributes provider: 'gradle'
        }

        tasks.named('javadoc') {
            options.addStringOption('-module-path', getJvmModulePath())
            options.addStringOption('-add-modules', getJvmAdditionalModules())
            enabled = false
        }

        tasks.withType(JavaCompile) {
            options.compilerArgs.addAll([
                  '-Xlint:-preview',
                  '--enable-preview',
                  '-Werror',
                  '-proc:none',
                  '--module-path',
                  getJvmModulePath(),
                  '--add-modules',
                  getJvmAdditionalModules(),
            ])
        }

        tasks.withType(JavaExec) {
            jvmArgs '--enable-preview'
            jvmArgs '--module-path'
            jvmArgs getJvmModulePath()
            jvmArgs '--add-modules'
            jvmArgs getJvmAdditionalModules()
        }

        tasks.withType(Test) {
            jvmArgs '--enable-preview'
            jvmArgs '--module-path'
            jvmArgs getJvmModulePath()
            jvmArgs '--add-modules'
            jvmArgs getJvmAdditionalModules()

            useJUnitPlatform()
            testLogging {
                events 'skipped', 'failed'
            }
        }

        tasks.named('check') {
            dependsOn 'javadoc'
        }

        if (!JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_18)) {
            // jacoco not yet compatible with JDK18
            tasks.named('test') {
                finalizedBy 'jacocoTestReport'
            }
        }

        // configuring Errorprone
        apply plugin: 'net.ltgt.errorprone'

        dependencies {
            errorprone 'com.google.errorprone:error_prone_core:2.15.0'
        }

        // configuring Spotbugs
        apply plugin: 'com.github.spotbugs'

        spotbugs {
            ignoreFailures = false
            excludeFilter = rootProject.file('spotbugs-exclude.xml')
        }

        // configuring Versions plugin
        dependencyUpdates.resolutionStrategy {
            componentSelection { rules ->
                rules.all { ComponentSelection selection ->
                    boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'b', 'pr', 'ea'].any { qualifier ->
                        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-+]*/
                    }
                    if (rejected) {
                        selection.reject('Release candidate')
                    }
                }
            }
        }
    }

    tasks.withType(Test) {
        systemProperty 'org.tweetwallfx.tests.executeCFPClientLiveTests', executeCFPClientLiveTests
    }
}

task createFolders(description: 'Creates the folders for the projects and sourceSets should they not exist.') doLast {
    rootProject.allprojects.each {p ->
        if (!p.getProjectDir().isDirectory()) {
            println 'Creating project folder: ' + p.getProjectDir()
            p.getProjectDir().mkdirs()
        }

        if (p.hasProperty('sourceSets')) {
            p.sourceSets*.allSource*.srcDirs*.each { File srcDir ->
                if (!srcDir.isDirectory()) {
                    println 'Creating source folder: ' + srcDir
                    srcDir.mkdirs()
                }
            }
        }
    }
}

task vdz dependsOn ':cinema2k:run'
