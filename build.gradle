/*
 * The MIT License
 *
 * Copyright 2018 TweetWallFX
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

plugins {
    id 'base'
    id 'build-dashboard'
    id 'com.diffplug.spotless' version '6.6.1'
    id 'com.github.ben-manes.versions' version '0.42.0'
    id 'com.github.spotbugs' version '5.0.7'
    id 'com.google.osdetector' version '1.7.0'
    id 'nebula.info-dependencies' version '11.3.3'
    id 'nebula.maven-nebula-publish' version '18.4.0'
    id 'net.ltgt.errorprone' version '2.0.2'
    id 'org.sonarqube' version '3.3'
}

ext {
    javaFxPlatform = osdetector.os == 'osx' ? 'mac' : osdetector.os == 'windows' ? 'win' : osdetector.os
}

allprojects {
    group = 'org.tweetwallfx'
    version = currentVersion
    description = 'JavaFX based Tweetwall'

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    // configuring Spotless
    apply plugin: "com.diffplug.spotless"

    spotless {
        format 'textBasedFiles', {
            target fileTree(project.rootDir) {
                include '**/*.gradle'
                include '**/*.asciidoc'
                include '**/*.adoc'
                include '**/*.asc'
                include '**/*.css'
                include '**/*.json'
                include '**/*.md'
                include '**/*.properties'
                include '**/.gitignore'
                exclude '**/.gradle/**'
                exclude '**/build/**'
            }

            trimTrailingWhitespace()
            indentWithSpaces(4)
            endWithNewline()
        }
        def closure = {
            trimTrailingWhitespace()
            indentWithSpaces(4)
            endWithNewline()
//            importOrder(
//                '\\#',    // static imports
//                'java',   // classes from java root package
//                'javax',  // classes from javax root package
//                '',       // any other import
//            )
            replaceRegex 'noStarImports', /\nimport (static )?[a-zA-Z0-9.]*[.][\*];\n/, '\n'
            replaceRegex 'noMultipleEmptyLines', '\n{3,}', '\n\n'
            replaceRegex 'Remove @author javadoc taglets.', '\n\\s*\\*\\s*@author.*', ''
            replaceRegex 'Remove trailing empty comment lines.', '\n\\s*\\*(\n\\s*\\*/\n)', '$1'
            replaceRegex 'Remove empty javadoc', '\n\\s*/\\*\\*\n\\s*\\*/\n', '\n\n'
            replaceRegex 'Remove empty lines before end of block', '\\n[\\n]+(\\s*})(?=\\n)', '\n$1'
            licenseHeaderFile rootProject.file('LICENSE.spotlessTemplate')
        }

        if (plugins.hasPlugin(org.gradle.api.plugins.GroovyPlugin)) {
            groovy(closure)
        } else if (plugins.hasPlugin(org.gradle.api.plugins.JavaPlugin)) {
            java(closure)
        }
    }

    afterEvaluate {
//        check.dependsOn(spotlessCheck)
    }

    // now configuring for projects that coontain code not just structuring the project
    if (childProjects.isEmpty()) {
        // configuring standard java project
        apply plugin: 'java'
        apply plugin: 'idea'
        apply plugin: 'jacoco'
        apply plugin: 'eclipse'
        apply plugin: 'nebula.info'
        apply plugin: 'maven-publish'

        configurations {
            javafx
            jaxb
        }

        dependencies {
            javafx group: 'org.openjfx', name: 'javafx-base', version: '18.0.1', classifier: javaFxPlatform
            javafx group: 'org.openjfx', name: 'javafx-graphics', version: '18.0.1', classifier: javaFxPlatform
            javafx group: 'org.openjfx', name: 'javafx-fxml', version: '18.0.1', classifier: javaFxPlatform
            javafx group: 'org.openjfx', name: 'javafx-controls', version: '18.0.1', classifier: javaFxPlatform

            jaxb group: 'jakarta.activation', name: 'jakarta.activation-api', version: '2.1.0'
            jaxb group: 'org.eclipse.angus', name: 'angus-activation', version: '1.0.0'
            jaxb group: 'jakarta.xml.bind', name: 'jakarta.xml.bind-api', version: '4.0.0'
            jaxb group: 'org.glassfish.jaxb', name: 'jaxb-runtime', version: '3.0.2'

            testImplementation group: 'junit', name: 'junit', version: '4.13.2'
            testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.22.0'
        }

        ext {
            getJvmModulePath = { -> (configurations.javafx + configurations.jaxb).asPath}
            getJvmAdditionalModules = { ->
                [
                    'jakarta.activation',
                    'jakarta.xml.bind',
                    'javafx.controls',
                    'javafx.graphics',
                    'javafx.fxml'
                ].toUnique().toSorted().join(',')
            }
        }

        tasks.named('jar') {
            manifest.attributes provider: 'gradle'
        }

        tasks.named('javadoc') {
            options.addStringOption('-module-path', getJvmModulePath())
            options.addStringOption('-add-modules', getJvmAdditionalModules())
            enabled = false
        }

        tasks.withType(JavaCompile) {
            options.compilerArgs.addAll([
                  '-Xlint:-preview',
                  '--enable-preview',
                  '-Werror',
                  '-proc:none',
                  '--module-path',
                  getJvmModulePath(),
                  '--add-modules',
                  getJvmAdditionalModules(),
            ])
        }

        tasks.withType(JavaExec) {
            jvmArgs '--enable-preview'
            jvmArgs '--module-path'
            jvmArgs getJvmModulePath()
            jvmArgs '--add-modules'
            jvmArgs getJvmAdditionalModules()
        }

        tasks.withType(Test) {
            jvmArgs '--enable-preview'
            jvmArgs '--module-path'
            jvmArgs getJvmModulePath()
            jvmArgs '--add-modules'
            jvmArgs getJvmAdditionalModules()
        }

        tasks.named('check') {
            dependsOn 'javadoc'
        }

        if (!JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_18)) {
            // jacoco not yet compatible with JDK18
            tasks.named('test') {
                finalizedBy 'jacocoTestReport'
            }
        }

        // configuring Errorprone
        if (!JavaVersion.current().isJava12Compatible()) {
            apply plugin: 'net.ltgt.errorprone'

            dependencies {
                errorprone group: 'com.google.errorprone', name: 'error_prone_core', version: '2.14.0'
            }
        }


        // configuring Spotbugs
        apply plugin: 'com.github.spotbugs'

        spotbugs {
            ignoreFailures = false
            excludeFilter = rootProject.file('spotbugs-exclude.xml')
        }

        // configuring Versions plugin
        dependencyUpdates.resolutionStrategy {
            componentSelection { rules ->
                rules.all { ComponentSelection selection ->
                    boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'b', 'pr', 'ea'].any { qualifier ->
                        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-+]*/
                    }
                    if (rejected) {
                        selection.reject('Release candidate')
                    }
                }
            }
        }
    }

    tasks.withType(org.gradle.api.tasks.testing.Test) {
        systemProperty 'org.tweetwallfx.tests.executeCFPClientLiveTests', executeCFPClientLiveTests
    }
}

task createFolders(description: 'Creates the folders for the projects and sourceSets should they not exist.') doLast {
    rootProject.allprojects.each {p ->
        if (!p.getProjectDir().isDirectory()) {
            println 'Creating project folder: ' + p.getProjectDir()
            p.getProjectDir().mkdirs()
        }

        if (p.hasProperty('sourceSets')) {
            p.sourceSets*.allSource*.srcDirs*.each { File srcDir ->
                if (!srcDir.isDirectory()) {
                    println 'Creating source folder: ' + srcDir
                    srcDir.mkdirs()
                }
            }
        }
    }
}

task vdz dependsOn ':cinema2k:run'
